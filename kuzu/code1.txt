package daoda;

import java.awt.AWTException;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.net.URI;
import java.time.LocalDateTime;
import java.time.Month;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Scanner;
import java.util.function.Consumer;
import java.util.function.IntConsumer;
import java.util.stream.IntStream;

import javax.imageio.ImageIO;
public class Next {
	public static String memo = "";
	public static Consumer  con [] = new Consumer[100] ;
	public static Scanner scan = new Scanner(System.in);

	/****************** OUTPUT ******************************/
	public static <T> void println (T t) {
		System.out.println(t);
	}
	public static void println() {
		System.out.println();
	}
	public static <T> void print(T t){
		System.out.print(t);
	}
	public static <T> void ePrint(T t){
		System.err.print(t);
	}
	public static <T> void ePrintln(T t){
		System.err.println(t);
	}
	public static  <T> void arrayPrintln(T ... t){
		for(T temp : t){
			println(temp);
		}
	}
	public static  <T> void arrayPrint(String  joins, T ... t){
		for(T temp : t){
			print(temp + joins);
		}
	}
	public static  <T> void arrayPrint( T ... t){
		for(T temp : t){
			print(temp);
		}
	}




	/****************** CONSOLE CONTROLL  ******************************/
	public static int readInt() {
		return scan.nextInt();
	}
	public static long readLong() {
		return scan.nextLong();
	}
	public static float readFloat() {
		return scan.nextFloat();
	}
	public static double readDouble() {
		return scan.nextDouble();
	}
	public static  String read() {
		return scan.next();
	}
	public static  String readLine() {
		return scan.nextLine();
	}
	public static boolean hasRead() {
		return scan.hasNext();
	}



	/****************** SAVE and LOAD ******************************/
	public static boolean saveText(File file, String ... value) {
		try {
			PrintWriter out = new PrintWriter(file);
			List list = Arrays.asList(value);
			list.forEach( v -> out.println(v));
			out.flush();
			return true;
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			return false;
		}
	}
	public static List readText(File file) {
		try {
			List temp = new ArrayList<String>();
			Scanner sc = new Scanner(file);
			while(sc.hasNextLine()) {
				temp.add(sc.nextLine());
			}
			return temp;
		} catch (FileNotFoundException e) {
			return null;
		}

	}

	public static <T> boolean saveObject(T t, File file) {
		if(!file.exists()) {
			try {
				file.createNewFile();
			} catch (IOException e) {
				e.printStackTrace();
				return false;
			}
		}
		try(ObjectOutputStream os = new ObjectOutputStream(new FileOutputStream(file))){
			os.writeObject(t);
			return true;
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			return false;
		} catch (IOException e) {
			e.printStackTrace();
			return false;
		}
	}
	public static Object readObject(File file) throws FileNotFoundException, IOException, ClassNotFoundException {
		if(!file.exists()) {
			try {
				file.createNewFile();
			} catch (IOException e) {
				e.printStackTrace();
				return null;
			}
		}
		try(ObjectInputStream is = new ObjectInputStream(new FileInputStream(file))){
			return (Object) is.readObject();
		}
	}



	/****************** DATE ******************************/

	public static int getSecondNow() {
		return new Time().second;
	}
	public static int getHourNow() {
		return new Time().hour;
	}
	public static int getMinuteNow() {
		return new Time().minute;
	}
	public static int getYearNow() {
		return new Time().year;
	}
	public static int getMonthNow() {
		return new Time().month.getValue();
	}


	/****************** MATH ******************************/

	public static int sum(List<Integer> list){
		return list.stream().mapToInt(x -> x).sum();
	}
	public static int multiple(List<Integer> list) {
		return list.stream().mapToInt(x -> x).reduce(1, (a,b) -> a * b);
	}
	public static int max(List<Integer> list) {
		return list.stream().mapToInt(x -> x).max().orElse(0);
	}
	public static int min(List<Integer> list) {
		return list.stream().mapToInt(x -> x).min().orElse(0);
	}
	public static double sumDuble(List<Double> list){
		return list.stream().mapToDouble(x -> x).sum();
	}
	public static double multipleDouble(List<Double> list) {
		return list.stream().mapToDouble(x -> x).reduce(1, (a,b) -> a * b);
	}
	public static double maxDouble(List<Double> list) {
		return list.stream().mapToDouble(x -> x).max().orElse(0);
	}
	public static double minDouble(List<Double> list) {
		return list.stream().mapToDouble(x -> x).min().orElse(0);
	}
	public void fors(int i,IntConsumer con) {
		IntStream.range(0, i).forEach(con);
	}


	/****************** CONTROLL VALUE ******************************/
	public static  <T> List asList(T ... ts ){
		List temp = new ArrayList();
		for(T tTemp : ts){
			temp.add(tTemp);
		}
		return temp;
	}
	public static <T>String str(T t){
		return String.valueOf(t);
	}
	public static String reverse(String temp){
		StringBuilder sb = new StringBuilder(temp);
		sb = sb.reverse();
		return sb.toString();
	}
	public static List<Integer> stringFindChars(String sentence, char find){
		List <Integer> list  = new ArrayList<Integer>();
		char c [] = sentence.toCharArray();
		for(int i = 0; i < i; i++){
			if(c[i] == find){
				list.add(i);
			}
		}
		return list;
	}


	/****************** OS ******************************/


	public static boolean doCMD(String [] cmd){
		ProcessBuilder e = new ProcessBuilder(cmd);
		Process p;
		e.redirectErrorStream(true);
		try {
			p = e.start();
			p.waitFor();
			return true;
		} catch (IOException | InterruptedException e1) {
			// TODO 自動生成された catch ブロック
			e1.printStackTrace();
			return false;
		}
	}
	public static boolean doCMD(boolean judge, String []cmd){
		ProcessBuilder e = new ProcessBuilder(cmd);
		Process p;
		BufferedReader br;
		String line;
		if(judge){
			e.redirectErrorStream(true);
			try {
				p = e.start();
				p.waitFor();
				br = new BufferedReader(new InputStreamReader(p.getInputStream()));
				while((line = br.readLine()) != null)println(line);
				br = new BufferedReader(new InputStreamReader(p.getErrorStream()));
				while((line = br.readLine()) != null)println(line);

				return true;
			} catch (IOException | InterruptedException e1) {
				// TODO 自動生成された catch ブロック
				e1.printStackTrace();
				return false;
			}
		}else{
			return doCMD(cmd);
		}
	}
	public static boolean saveProperties(Map<String, String> map, File file){
		Data data = new Data(file,  map);
		return true;
	}
	public static String  loadProperties(File file, String key){
		InputStream inputStream;
		Properties properties = new Properties();
		try {
			inputStream = new FileInputStream(file);
			properties.load(inputStream);
			inputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
		return properties.getProperty(key);

	}


	public static void finish(){
		System.exit(0);
	}
	public static void showProperty(){
		println(System.getProperties().toString().replaceAll(", ", "\n"));
	}
	public static String getProperty(String key){
		return System.getProperty(key);
	}



	/********************* DESKTOP *********************/
	public static boolean open(File file){
		Desktop desk = Desktop.getDesktop();
		if(desk.isDesktopSupported()){
			try {
				desk.open(file);
				return true;
			} catch (IOException e) {
				return false;
			}
		}else{
			return false;
		}
	}
	public static boolean edit(File file){
		Desktop desk = Desktop.getDesktop();
		if(desk.isDesktopSupported()){
			try {
				desk.edit(file);
				return true;
			} catch (IOException e) {
				return false;
			}
		}else{
			return false;
		}
	}

	public static boolean browse(URI url){
		Desktop desk = Desktop.getDesktop();
		if(desk.isDesktopSupported()){
			try {
				desk.browse(url);
				return true;
			} catch (IOException e) {
				return false;
			}
		}else{
			return false;
		}
	}
	public boolean  putScreen(File dir, String filename)  {
		if(!dir.exists()) dir.mkdirs();
		Robot robot;
		try {
			robot = new Robot();
			Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
			BufferedImage image = robot.createScreenCapture(
					new Rectangle(0, 0, screenSize.width, screenSize.height));
			ImageIO.write(image, "PNG", new File(dir.toString() + filename));
			return true;
		} catch (AWTException | IOException e) {
			e.printStackTrace();
			return false;
		}
		
		
	}
	public Image getScreen(){
		
		Robot robot;
		try {
			robot = new Robot();
			Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
			BufferedImage image = robot.createScreenCapture(
					new Rectangle(0, 0, screenSize.width, screenSize.height));
			return image;
		} catch (AWTException e) {
			
			e.printStackTrace();
			return null;
		}
		
	}
	


	/********************* CLASS *********************/



	private static class Data{
		private File file;
		private Map<String, String> proerties = new HashMap<String, String>();


		public Data(File file, Map map){
			this.file = file;
			this.proerties = map;
			save();
		}
		public  boolean save(){
			Next.saveText(file, toStrings(proerties));
			return true;
		}
		public  String[]  toStrings(Map <String, String>map){
			String [] temp = new String[map.keySet().size()];
			int count  = 0;
			for(String  key : map.keySet()){
				temp[count++] = key + "=" + map.get(key);
			}
			return temp;
		}
	}
	private static class Time{
		int second = LocalDateTime.now().getSecond();
		int minute = LocalDateTime.now().getSecond();
		int hour = LocalDateTime.now().getHour();
		int day =LocalDateTime.now().getDayOfMonth();
		Month month = LocalDateTime.now().getMonth();
		int year =LocalDateTime.now().getDayOfYear();
	}

}
